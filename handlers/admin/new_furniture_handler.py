from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from database.crud import CrudCategory, CrudFurniture
from keyboard.button_template import country_kb, kitchen_subcategory_kb
from keyboard.keyboard_builder import make_row_keyboards
from states.states import NewFurnitureStates

router = Router()


@router.callback_query(F.data == 'new_furniture')
async def new_furniture_function(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer()

    text = (
        "ü™Ñ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ–±–µ–ª–∏</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –º–µ–±–µ–ª–∏ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Ç–∏–ª—å –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–∂–∞–Ω—ã–π –¥–∏–≤–∞–Ω —Å –º—è–≥–∫–æ–π –æ–±–∏–≤–∫–æ–π –∏ –ø—Ä–æ—á–Ω—ã–º –∫–∞—Ä–∫–∞—Å–æ–º.</code>"
    )

    await callback_query.message.answer(text)
    await state.set_state(NewFurnitureStates.description)


@router.message(NewFurnitureStates.description)
async def get_description_new_furniture(message: types.Message, state: FSMContext):
    description_furniture = (message.text or '').strip()
    if not description_furniture:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(description_new_furniture=description_furniture)

    crud = CrudCategory()
    get_categories = await crud.get_all_categories()
    categories = [category_name.name for category_name in get_categories]

    if not categories:
        await message.answer("üì≠ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–±–µ–ª–∏.")
        await state.clear()
        return

    text = (
        "‚ú® –û—Ç–ª–∏—á–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> –¥–ª—è —ç—Ç–æ–π –º–µ–±–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá"
    )

    await message.answer(text, reply_markup=make_row_keyboards(categories))
    await state.set_state(NewFurnitureStates.category)


@router.message(NewFurnitureStates.category)
async def get_category(message: types.Message, state: FSMContext):
    category_name = (message.text or '').strip()

    if not category_name:
        await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(category_name=category_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—É—Ö–æ–Ω–Ω—É—é –º–µ–±–µ–ª—å
    if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
        text = (
            f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: <b>{category_name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∏–ø –∫—É—Ö–Ω–∏</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        await message.answer(text, reply_markup=make_row_keyboards(kitchen_subcategory_kb))
        await state.set_state(NewFurnitureStates.kitchen_type)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
        text = (
            f"üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: <b>{category_name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è</b> –º–µ–±–µ–ª–∏ üåç\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        await message.answer(text, reply_markup=make_row_keyboards(country_kb))
        await state.set_state(NewFurnitureStates.country)


@router.message(NewFurnitureStates.kitchen_type)
async def get_kitchen_type(message: types.Message, state: FSMContext):
    kitchen_type = (message.text or '').strip()

    if not kitchen_type:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫—É—Ö–Ω–∏
    await state.update_data(kitchen_type=kitchen_type)
    
    # –î–ª—è –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤—Å–µ–≥–¥–∞ –†–æ—Å—Å–∏—è
    await state.update_data(country_name="üá∑üá∫ –†–æ—Å—Å–∏—è")

    text = (
        f"üç≥ –¢–∏–ø –∫—É—Ö–Ω–∏ –≤—ã–±—Ä–∞–Ω: <b>{kitchen_type}</b>\n\n"
        "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: <b>üá∑üá∫ –†–æ—Å—Å–∏—è</b> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b> –º–µ–±–µ–ª–∏ üì∏\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–Ω–µ –±–æ–ª–µ–µ 10).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª</b> –Ω–∏–∂–µ."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    finish_button = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=finish_button)
    await state.set_state(NewFurnitureStates.photos)
    await state.update_data(photos=[])


@router.message(NewFurnitureStates.country)
async def get_country(message: types.Message, state: FSMContext):
    country_name = (message.text or '').strip()

    if not country_name:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(country_name=country_name)

    text = (
        f"üåç –°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞: <b>{country_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b> –º–µ–±–µ–ª–∏ üì∏\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–Ω–µ –±–æ–ª–µ–µ 10).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª</b> –Ω–∏–∂–µ."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    finish_button = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=finish_button)
    await state.set_state(NewFurnitureStates.photos)
    await state.update_data(photos=[])


@router.message(NewFurnitureStates.photos)
async def get_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        if not photos:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ–±–µ–ª–∏.")
            return

        description = data.get("description_new_furniture", '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        category_name = data.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        country_name = data.get("country_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        kitchen_type = data.get("kitchen_type")

        # –î–ª—è –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫—É—Ö–Ω–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        if kitchen_type and "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
            description = f"[{kitchen_type}] {description}"

        crud = CrudFurniture()
        new_furniture = await crud.create_furniture(
            description=description,
            category=category_name,
            country=country_name
        )

        if not new_furniture:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–±–µ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–µ–±–µ–ª–∏
        photo_added = await crud.add_photos_to_furniture(new_furniture.id, photos)

        if not photo_added:
            await message.answer("‚ö†Ô∏è –ú–µ–±–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        else:
            await message.answer("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        text = (
            "üéâ <b>–ú–µ–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
            f"<b>–¢–∏–ø –∫—É—Ö–Ω–∏:</b> {kitchen_type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ! ‚úÖ"
        )

        await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–ø–∏—Å–∫—É
    if message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo_file_id = message.photo[-1].file_id
        photos.append(photo_file_id)
        await state.update_data(photos=photos)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(photos) >= 10:
            await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10). –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª.")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª.")