from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import re

from database.crud import CrudFurniture
from keyboard.button_template import contry_of_origin_kb, kitchen_subcategory_inline_kb
from keyboard.keyboard_builder import make_row_inline_keyboards
from settings import config
from .navigation_handler import back_to_main_callback

router = Router()

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–∏–ø–æ–≤ –º–µ–±–µ–ª–∏
FURNITURE_NAMES = {
    'sleep_furniture': 'üõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å',
    'kitchen_furniture': 'üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å',
    'soft_furniture': 'üõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å',
    'tables_chairs': 'üìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è',
    'cabinets_commodes': 'üì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã',
    'bed_furniture': 'üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏',
    'mattresses': 'üõèÔ∏èÔ∏è –ú–∞—Ç—Ä–∞—Å—ã',
    'wardrobes': 'üö™ –®–∫–∞—Ñ—ã'
}

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏
KITCHEN_SUBCATEGORIES = {
    'straight_kitchen': 'üìè –ü—Ä—è–º–∞—è –∫—É—Ö–Ω—è',
    'corner_kitchen': 'üìê –£–≥–ª–æ–≤–∞—è –∫—É—Ö–Ω—è'
}

# –°–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
ORIGIN_NAMES = {
    "russian_origin": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "turkey_origin": "üáπüá∑ –¢—É—Ä—Ü–∏—è"
}

# –¢–∏–ø—ã –º–µ–±–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
TYPES_WITH_ORIGIN = {'sleep_furniture', 'soft_furniture', 'tables_chairs'}

# –¢–∏–ø—ã –º–µ–±–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
TYPES_WITH_SUBCATEGORIES = {'kitchen_furniture'}


def extract_kitchen_type(description: str) -> tuple:
    match = re.search(r'\[(.*?)\]', description)
    if match:
        kitchen_type = match.group(1)
        clean_description = re.sub(r'\[.*?\]\s*', '', description)
        return kitchen_type, clean_description
    return None, description


async def show_furniture_list(message: types.Message, category_name: str, country: str = "üá∑üá∫ –†–æ—Å—Å–∏—è", kitchen_type: str = None):
    crud = CrudFurniture()

    # –î–ª—è –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –†–æ—Å—Å–∏—é –∫–∞–∫ —Å—Ç—Ä–∞–Ω—É
    if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
        country = "üá∑üá∫ –†–æ—Å—Å–∏—è"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–µ
    furniture_list = await crud.get_furniture_by_category_and_country(
        category_name=category_name,
        country=country
    )

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∫—É—Ö–Ω–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
    if kitchen_type and furniture_list:
        furniture_list = [
            furniture for furniture in furniture_list
            if f"[{kitchen_type}]" in furniture.description
        ]

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    contact_info = (
        f"ü™ë –î–ª—è –∑–∞–∫–∞–∑–∞ –º–µ–±–µ–ª–∏ –ø–∏—à–∏—Ç–µ –Ω–∞–º:\n"
        f"üì≤ WhatsApp: https://wa.me/+{config.NUMBER}\n"
        f'üí¨ Telegram: https://t.me/{config.TELEGRAM}\n'
        f'{"-" * 50}\n'
        f"‚ú® –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–∏–Ω–æ–∫ –∏ –∞–∫—Ü–∏–π!\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ Instagram, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–µ–∂–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞:\n"
        f"üì∏ Instagram: https://instagram.com/{config.INSTAGRAM}\n"
        f'{"-" * 50}\n'
    )

    if furniture_list:
        for furniture in furniture_list:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∫—É—Ö–Ω–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏
            displayed_kitchen_type = ""
            if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
                kt, clean_description = extract_kitchen_type(furniture.description)
                if kt:
                    displayed_kitchen_type = f"üç≥ –¢–∏–ø –∫—É—Ö–Ω–∏: {kt}\n"
            else:
                clean_description = furniture.description

            furniture_text = (
                f"{clean_description}\n\n"
                f"{displayed_kitchen_type}"
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–µ–±–µ–ª–∏: {furniture.category_name}\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {furniture.country_origin}\n"
                f"üìÜ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {furniture.created_at}\n\n\n"
                f"{'-' * 50}\n"
                f"{contact_info}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photos = await crud.get_furniture_photos(furniture.id)
            if photos:
                media_group = [types.InputMediaPhoto(media=photo.file_id) for photo in photos[:10]]
                try:
                    await message.answer_media_group(media_group)
                except Exception:
                    for photo in photos[:10]:
                        await message.answer_photo(photo.file_id)
            else:
                await message.answer("üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            await message.answer(furniture_text, disable_web_page_preview=True)

    else:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ–π –º–µ–±–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


@router.callback_query(F.data.in_(FURNITURE_NAMES.keys()))
async def furniture_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–±–µ–ª–∏."""
    furniture_type = callback_query.data
    await state.update_data(type_furniture=furniture_type)

    if furniture_type in TYPES_WITH_SUBCATEGORIES:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏:",
            reply_markup=make_row_inline_keyboards(kitchen_subcategory_inline_kb)
        )

    elif furniture_type in TYPES_WITH_ORIGIN:
        await callback_query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:",
            reply_markup=make_row_inline_keyboards(contry_of_origin_kb)
        )

    else:
        category_name = FURNITURE_NAMES.get(furniture_type, '–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å')
        await show_furniture_list(callback_query.message, category_name)

    await callback_query.answer()


@router.callback_query(F.data.in_(KITCHEN_SUBCATEGORIES.keys()))
@router.callback_query(F.data == "back_to_main")
async def kitchen_subcategory_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_main":
        await back_to_main_callback(callback_query, state)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫—É—Ö–Ω–∏
        kitchen_type_key = callback_query.data
        kitchen_type = KITCHEN_SUBCATEGORIES.get(kitchen_type_key, '–ö—É—Ö–Ω—è')

        await state.update_data(kitchen_subcategory=kitchen_type_key)
        await state.update_data(selected_kitchen_type=kitchen_type)

        # –î–ª—è –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        await show_furniture_list(
            callback_query.message,
            "üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å",
            "üá∑üá∫ –†–æ—Å—Å–∏—è",
            kitchen_type
        )

    await callback_query.answer()


@router.callback_query(F.data.in_(ORIGIN_NAMES.keys()))
async def origin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    furniture_type = user_data.get('type_furniture', 'sleep_furniture')
    origin_type = callback_query.data

    await state.update_data(origin_type=origin_type)

    category_name = FURNITURE_NAMES.get(furniture_type, '–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å')
    origin_name = ORIGIN_NAMES.get(origin_type, 'üá∑üá∫ –†–æ—Å—Å–∏—è')
    kitchen_type = user_data.get('selected_kitchen_type')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–±–µ–ª—å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–∏–ø—É –∫—É—Ö–Ω–∏ –∏ —Å—Ç—Ä–∞–Ω–µ
    await show_furniture_list(callback_query.message, category_name, origin_name, kitchen_type)

    await callback_query.answer()
